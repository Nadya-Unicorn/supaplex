import pygame
import os
import sys
from PIL import Image


FPS = 50
WIDTH = 1200
HEIGHT = 768
LENGTH = 32

def terminate():
    pygame.quit()
    sys.exit()

def load_image(name, colorkey=None):
    fullname = os.path.join('pics', name)
    print(fullname)
    myimage = pygame.image.load(fullname) # .convert()
    print(myimage)
    print(fullname)

    return myimage

def cut_image(iimage, x1, y1):
    #im = Image.open(iimage)
    x = x1 * LENGTH
    y = y1 * LENGTH
    print(iimage)
    #subsurface = a_surface.subsurface((x, y, width, height))
    #iimage.crop(x, y, x + LENGTH, y + LENGTH)
    return iimage.subsurface(x, y, LENGTH, LENGTH)

def start_screen():
    intro_text = ["SUPAPLEX", "",
                  "Правила игры",
                  "Если в правилах несколько строк,",
                  "приходится выводить их построчно"]

    fon = pygame.transform.scale(load_image('Background.png'), (WIDTH, HEIGHT))
    screen.blit(fon, (0, 0))
    font = pygame.font.Font(None, 30)
    text_coord = 50
    for line in intro_text:
        string_rendered = font.render(line, 1, pygame.Color('black'))
        intro_rect = string_rendered.get_rect()
        text_coord += 10
        intro_rect.top = text_coord
        intro_rect.x = 10
        text_coord += intro_rect.height
        screen.blit(string_rendered, intro_rect)

    clock = pygame.time.Clock()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                terminate()
            elif event.type == pygame.KEYDOWN or event.type == pygame.MOUSEBUTTONDOWN:
                return  # начинаем игру
        pygame.display.flip()
        clock.tick(FPS)

def load_level(filename):
    #filename = "pics/" + filename
    # читаем уровень, убирая символы перевода строки
    with open(filename, 'r') as mapFile:
        level_map = [line.strip() for line in mapFile]

    # и подсчитываем максимальную длину
    max_width = max(map(len, level_map))

    # дополняем каждую строку пустыми клетками ('.')
    return list(map(lambda x: x.ljust(max_width, '.'), level_map))

all_sprites = pygame.sprite.Group()
tiles_group = pygame.sprite.Group()
player_group = pygame.sprite.Group()

def generate_level(level):
    new_player, x, y = None, None, None
    for y in range(len(level)):
        for x in range(len(level[y])):
            print(x, y)
            if level[y][x] == ' ':
                Tile('empty', x, y, True)
            elif level[y][x] == 'o':
                Tile('stone', x, y, True)
            elif level[y][x] == '.':
                Tile('grass', x, y, True)
            elif level[y][x] == '3':
                Tile('empty', x, y, True)
                new_player = Player(x, y)
            elif level[y][x] == 'y':
                Tile('crystal', x, y, True)
            elif level[y][x] == '5':
                Tile('chip_square', x, y, False)
            elif level[y][x] == 'e':
                Tile('exit', x, y, False)
            elif level[y][x] == 'b':
                Tile('disketa', x, y, False)
            elif level[y][x] == 'c':
                Tile('pult', x, y, False)   # Взрыв дискет
            elif level[y][x] == '#':
                Tile('fence', x, y, False)
            elif level[y][x] == 'j':
                Tile('scheme1', x, y, False)
            elif level[y][x] == 'k':
                Tile('scheme2', x, y, False)
            elif level[y][x] == 'A':
                Tile('scissors', x, y, False)
            else:
                num = ord(level[y][x]) - 48
                name = 'pic' + str(num)

                Tile(name, x, y, False)
                #filename1 = name + '.png'
                #tile_images[name] = cut_image(load_image(picname), num, 0)
                #print(tile_images)

    # вернем игрока, а также размер поля в клетках
    return new_player, x, y

picname = 'image_all.png'
tile_images = {'empty': cut_image(load_image(picname), 0, 0),
               'stone': cut_image(load_image(picname), 1, 0),
               'grass': cut_image(load_image(picname), 2, 0),
               'crystal': cut_image(load_image(picname), 4, 0),
               'chip_square': cut_image(load_image(picname), 5, 0),
               'fence': cut_image(load_image(picname), 6, 0),
               'exit': cut_image(load_image(picname), 7, 0),
               'pic8': cut_image(load_image(picname), 8, 0),
               'disketa': cut_image(load_image(picname), 8, 0),
               'pic9': cut_image(load_image(picname), 9, 0),
               'pic10': cut_image(load_image(picname), 10, 0),
               'pic11': cut_image(load_image(picname), 11, 0),
               'pic12': cut_image(load_image(picname), 12, 0),
               'pic13': cut_image(load_image(picname), 13, 0),
               'pic14': cut_image(load_image(picname), 14, 0),
               'pic15': cut_image(load_image(picname), 15, 0),
               'pic16': cut_image(load_image(picname), 16, 0),
               'scissors': cut_image(load_image(picname), 17, 0),
               'pic18': cut_image(load_image(picname), 18, 0),
               'pic19': cut_image(load_image(picname), 19, 0),
               'pult': cut_image(load_image(picname), 19, 0),
               'pic20': cut_image(load_image(picname), 20, 0),
               'pic21': cut_image(load_image(picname), 21, 0),
               'pic22': cut_image(load_image(picname), 22, 0),
               'pic23': cut_image(load_image(picname), 23, 0),
               'pic24': cut_image(load_image(picname), 24, 0),
               'pic25': cut_image(load_image(picname), 25, 0),
               'scheme1': cut_image(load_image(picname), 26, 0),
               'scheme2': cut_image(load_image(picname), 27, 0),
               'pic28': cut_image(load_image(picname), 28, 0),
               'pic29': cut_image(load_image(picname), 29, 0),
               'pic30': cut_image(load_image(picname), 30, 0),
               'pic31': cut_image(load_image(picname), 31, 0),
               'pic32': cut_image(load_image(picname), 32, 0),
               'pic33': cut_image(load_image(picname), 33, 0),
               'pic34': cut_image(load_image(picname), 34, 0),
               'pic35': cut_image(load_image(picname), 35, 0),
               'pic36': cut_image(load_image(picname), 36, 0),
               'pic37': cut_image(load_image(picname), 37, 0),
               'pic38': cut_image(load_image(picname), 38, 0),
               'pic39': cut_image(load_image(picname), 39, 0),
               'pic40': cut_image(load_image(picname), 40, 0),
               'pic41': cut_image(load_image(picname), 41, 0)
               }
player_image = cut_image(load_image(picname), 3, 0)

tile_width = tile_height = 32


class Tile(pygame.sprite.Sprite):
    def __init__(self, tile_type, pos_x, pos_y, can_go):
        super().__init__(tiles_group, all_sprites)
        self.image = tile_images[tile_type]
        self.can_go = can_go
        self.rect = self.image.get_rect().move(tile_width * pos_x, tile_height * pos_y)

    def can_go(self):
        return self.can_go()


class Player(pygame.sprite.Sprite):
    def __init__(self, pos_x, pos_y):
        super().__init__(player_group, all_sprites)
        self.image = player_image
        self.rect = self.image.get_rect().move(tile_width * pos_x, tile_height * pos_y)


class Camera:
    # зададим начальный сдвиг камеры
    def __init__(self):
        self.dx = 500
        self.dy = 500

    # сдвинуть объект obj на смещение камеры
    def apply(self, obj):
        obj.rect.x += self.dx
        obj.rect.y += self.dy

    # позиционировать камеру на объекте target
    def update(self, target):
        self.dx = -(target.rect.x + target.rect.w // 2 - tile_width // 2) + WIDTH // 2
        self.dy = -(target.rect.y + target.rect.h // 2 - tile_height // 2) + HEIGHT // 2


pygame.init()

size = WIDTH, HEIGHT
screen = pygame.display.set_mode(size)

start_screen()
xm = 0
ym = 0
level = load_level("level1.txt")
player, x, y = generate_level(level)
camera = Camera()
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            terminate()
        if event.type == pygame.KEYDOWN:
            xm = 0
            ym = 0
            key = pygame.key.get_pressed()
            if key[pygame.K_LEFT]:
                player.rect.x -= 32
            if key[pygame.K_RIGHT]:
                player.rect.x += 32
            if key[pygame.K_UP]:
                player.rect.y -= 32
            if key[pygame.K_DOWN]:
                player.rect.y += 32
    screen.fill((0, 0, 0))
    # изменяем ракурс камеры
    camera.update(player)
    # обновляем положение всех спрайтов
    for sprite in all_sprites:
        camera.apply(sprite)

    all_sprites.draw(screen)
    tiles_group.draw(screen)
    player_group.draw(screen)
    pygame.display.flip()
