import pygame
import os
import sys
import time


FPS = 60
WIDTH = 1200
HEIGHT = 768
LENGTH = 32
COUNT = 0
EATEN = 0
BOARD = []

def terminate():
    pygame.quit()
    sys.exit()

def load_image(name, colorkey=None):
    fullname = os.path.join('pics', name)
    myimage = pygame.image.load(fullname) # .convert()
    return myimage

def cut_image(iimage, x1, y1):
    x = x1 * LENGTH
    y = y1 * LENGTH
    return iimage.subsurface(x, y, LENGTH, LENGTH)

def choose_level():
    global file_of_game_to_play

    fon = pygame.transform.scale(load_image('Background.png'), (WIDTH, HEIGHT))
    screen.blit(fon, (0, 0))
    pygame.draw.rect(screen, (200, 200, 200), (WIDTH // 2 - 180, HEIGHT // 2 - 180, 360, 360), 0)

    pygame.draw.rect(screen, (250, 250, 200), (WIDTH // 2 - 160, HEIGHT // 2 - 160, 100, 100), 0)
    pygame.draw.rect(screen, (250, 250, 200), (WIDTH // 2 - 50, HEIGHT // 2 - 160, 100, 100), 0)
    pygame.draw.rect(screen, (250, 250, 200), (WIDTH // 2 + 60, HEIGHT // 2 - 160, 100, 100), 0)

    pygame.draw.rect(screen, (250, 250, 200), (WIDTH // 2 - 160, HEIGHT // 2 - 50, 100, 100), 0)
    pygame.draw.rect(screen, (250, 250, 200), (WIDTH // 2 - 50, HEIGHT // 2 - 50, 100, 100), 0)
    pygame.draw.rect(screen, (250, 250, 200), (WIDTH // 2 + 60, HEIGHT // 2 - 50, 100, 100), 0)

    pygame.draw.rect(screen, (250, 250, 200), (WIDTH // 2 - 160, HEIGHT // 2 + 60, 100, 100), 0)
    pygame.draw.rect(screen, (250, 250, 200), (WIDTH // 2 - 50, HEIGHT // 2 + 60, 100, 100), 0)
    pygame.draw.rect(screen, (250, 250, 200), (WIDTH // 2 + 60, HEIGHT // 2 + 60, 100, 100), 0)

    font = pygame.font.Font(None, 120)
    text_coord = 50
    num = 0
    delta_width = -136
    delta_height = -142
    for i in range(3):
        delta_height = -142
        for j in range(3):
            delta_width = -136
            num += 1
            text = font.render(str(num), 1, (0, 0, 0))
            text_x = WIDTH // 2 + delta_width + 110 * j
            text_y = HEIGHT // 2 + delta_height + 110 * i
            text_w = text.get_width()
            text_h = text.get_height()
            screen.blit(text, (text_x, text_y))

    clock = pygame.time.Clock()
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                terminate()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                x = event.pos[0]
                y = event.pos[1]
                # print(x, y)
                if WIDTH // 2 - 160 < x < WIDTH // 2 - 60 and HEIGHT // 2 - 160 < y < HEIGHT // 2 - 60:
                    file_of_game_to_play = 'level1.txt'
                elif WIDTH // 2 - 50 < x < WIDTH // 2 + 50 and HEIGHT // 2 - 160 < y < HEIGHT // 2 - 60:
                    file_of_game_to_play = 'level2.txt'
                elif WIDTH // 2 + 60 < x < WIDTH // 2 + 160 and HEIGHT // 2 - 160 < y < HEIGHT // 2 - 60:
                    file_of_game_to_play = 'level3.txt'

                elif WIDTH // 2 - 160 < x < WIDTH // 2 - 60 and HEIGHT // 2 - 50 < y < HEIGHT // 2 + 50:
                    file_of_game_to_play = 'level4.txt'
                elif WIDTH // 2 - 50 < x < WIDTH // 2 + 50 and HEIGHT // 2 - 50 < y < HEIGHT // 2 + 50:
                    file_of_game_to_play = 'level5.txt'
                elif WIDTH // 2 + 60 < x < WIDTH // 2 + 160 and HEIGHT // 2 - 50 < y < HEIGHT // 2 + 50:
                    file_of_game_to_play = 'level6.txt'

                elif WIDTH // 2 - 160 < x < WIDTH // 2 - 60 and HEIGHT // 2 + 60 < y < HEIGHT // 2 + 160:
                    file_of_game_to_play = 'level7.txt'
                elif WIDTH // 2 - 50 < x < WIDTH // 2 + 50 and HEIGHT // 2 + 60 < y < HEIGHT // 2 + 160:
                    file_of_game_to_play = 'level8.txt'
                elif WIDTH // 2 + 60 < x < WIDTH // 2 + 160 and HEIGHT // 2 + 60 < y < HEIGHT // 2 + 160:
                    file_of_game_to_play = 'level9.txt'
                return
        pygame.display.flip()
        clock.tick(FPS)


def start_screen():
    fon = pygame.transform.scale(load_image('Background.png'), (WIDTH, HEIGHT))
    screen.blit(fon, (0, 0))
    pygame.draw.rect(screen, (150, 255, 150), (WIDTH // 2 - 75, HEIGHT // 2 + 100,
                                               250, 50), 0)
    pygame.draw.rect(screen, (150, 255, 150), (WIDTH // 2 - 75, HEIGHT // 2 + 175,
                                               250, 50), 0)
    font = pygame.font.Font(None, 60)
    text_coord = 50
    st = 'Start game'
    text = font.render(st, 1, (0, 0, 0))
    text_x = WIDTH // 2 - 70
    text_y = HEIGHT // 2 + 105
    text_w = text.get_width()
    text_h = text.get_height()
    screen.blit(text, (text_x, text_y))

    st = 'Select level'
    text = font.render(st, 1, (0, 0, 0))
    text_x = WIDTH // 2 - 70
    text_y = HEIGHT // 2 + 180
    text_w = text.get_width()
    text_h = text.get_height()
    screen.blit(text, (text_x, text_y))

    clock = pygame.time.Clock()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                terminate()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                x = event.pos[0]
                y = event.pos[1]
                if WIDTH // 2 - 75 < x < WIDTH // 2 - 75 + 250 and HEIGHT // 2 + 100 < y < HEIGHT // 2 + 150:
                    return  # начинаем игру
                elif WIDTH // 2 - 75 < x < WIDTH // 2 - 75 + 250 and HEIGHT // 2 + 175 < y < HEIGHT // 2 + 225:
                    choose_level()
                    return
        pygame.display.flip()
        clock.tick(FPS)

def load_level(filename):
    # читаем уровень, убирая символы перевода строки
    with open(filename, 'r') as mapFile:
        level_map = [line.strip() for line in mapFile]

    # и подсчитываем максимальную длину
    max_width = max(map(len, level_map))

    # дополняем каждую строку пустыми клетками ('.')
    return list(map(lambda x: x.ljust(max_width, '.'), level_map))

all_sprites = pygame.sprite.Group()
tiles_group = pygame.sprite.Group()
player_group = pygame.sprite.Group()

def generate_level(level):
    new_player, x, y = None, None, None
    count = 0
    for y in range(len(level)):
        line = []
        for x in range(len(level[y])):
            if level[y][x] == ' ':
                empty = Tile('empty', x, y, True)
                line.append(['empty', True])
            elif level[y][x] == 'o':
                stone = Tile('stone', x, y, True)
                line.append(['stone', False])
            elif level[y][x] == '.':
                grass = Tile('grass', x, y, True)
                line.append(['grass', True])
            elif level[y][x] == '3':
                empty = Tile('empty', x, y, True)
                line.append(['empty', True])
                new_player = Player(x, y)
            elif level[y][x] == 'y':
                crystal = Tile('crystal', x, y, True)
                count += 1
                line.append(['crystal', True])
            elif level[y][x] == '5':
                chip_square = Tile('chip_square', x, y, False)
                line.append(['chip_square', False])
            elif level[y][x] == 'e':
                exit = Tile('exit', x, y, False)
                line.append(['exit', False])
            elif level[y][x] == 'b':
                disketa = Tile('disketa', x, y, False)
                line.append(['disketa', False])
            elif level[y][x] == 'c':
                pult = Tile('pult', x, y, False)   # Взрыв дискет
                line.append(['pult', False])
            elif level[y][x] == '#':
                fence = Tile('fence', x, y, False)
                line.append(['fence', False])
            elif level[y][x] == 'j':
                scheme1 = Tile('scheme1', x, y, False)
                line.append(['scheme1', False])
            elif level[y][x] == 'k':
                scheme2 = Tile('scheme2', x, y, False)
                line.append(['scheme2', False])
            elif level[y][x] == 'A':
                scissors = Tile('scissors', x, y, False)
                line.append(['scissors', False])
            else:
                num = ord(level[y][x]) - 48
                name = 'pic' + str(num)
                if level[y][x] == 'I':
                    cango = True
                else:
                    cango = False
                picture = Tile(name, x, y, cango)
                line.append([name, cango])
        BOARD.append(line)
    # вернем игрока, а также размер поля в клетках
    return new_player, x, y, count

def update_level(x, y):
    for y in range(len(BOARD)):
        for x in range(len(BOARD[y])):
            Tile(BOARD[y][x][0], x, y, BOARD[y][x][1])
    player = Player(x, y)

picname = 'image_all.png'
tile_images = {'empty': cut_image(load_image(picname), 0, 0),
               'stone': cut_image(load_image(picname), 1, 0),
               'grass': cut_image(load_image(picname), 2, 0),
               'crystal': cut_image(load_image(picname), 4, 0),
               'chip_square': cut_image(load_image(picname), 5, 0),
               'fence': cut_image(load_image(picname), 6, 0),
               'exit': cut_image(load_image(picname), 7, 0),
               'pic8': cut_image(load_image(picname), 8, 0),
               'disketa': cut_image(load_image(picname), 8, 0),
               'pic9': cut_image(load_image(picname), 9, 0),
               'pic10': cut_image(load_image(picname), 10, 0),
               'pic11': cut_image(load_image(picname), 11, 0),
               'pic12': cut_image(load_image(picname), 12, 0),
               'pic13': cut_image(load_image(picname), 13, 0),
               'pic14': cut_image(load_image(picname), 14, 0),
               'pic15': cut_image(load_image(picname), 15, 0),
               'pic16': cut_image(load_image(picname), 16, 0),
               'scissors': cut_image(load_image(picname), 17, 0),
               'pic18': cut_image(load_image(picname), 18, 0),
               'pic19': cut_image(load_image(picname), 19, 0),
               'pult': cut_image(load_image(picname), 19, 0),
               'pic20': cut_image(load_image(picname), 20, 0),
               'pic21': cut_image(load_image(picname), 21, 0),
               'pic22': cut_image(load_image(picname), 22, 0),
               'pic23': cut_image(load_image(picname), 23, 0),
               'pic24': cut_image(load_image(picname), 24, 0),
               'pic25': cut_image(load_image(picname), 25, 0),
               'scheme1': cut_image(load_image(picname), 26, 0),
               'scheme2': cut_image(load_image(picname), 27, 0),
               'pic28': cut_image(load_image(picname), 28, 0),
               'pic29': cut_image(load_image(picname), 29, 0),
               'pic30': cut_image(load_image(picname), 30, 0),
               'pic31': cut_image(load_image(picname), 31, 0),
               'pic32': cut_image(load_image(picname), 32, 0),
               'pic33': cut_image(load_image(picname), 33, 0),
               'pic34': cut_image(load_image(picname), 34, 0),
               'pic35': cut_image(load_image(picname), 35, 0),
               'pic36': cut_image(load_image(picname), 36, 0),
               'pic37': cut_image(load_image(picname), 37, 0),
               'pic38': cut_image(load_image(picname), 38, 0),
               'pic39': cut_image(load_image(picname), 39, 0),
               'pic40': cut_image(load_image(picname), 40, 0),
               'pic41': cut_image(load_image(picname), 41, 0)
               }
player_image = cut_image(load_image(picname), 3, 0)

tile_width = tile_height = 32


class Tile(pygame.sprite.Sprite):
    def __init__(self, tile_type, pos_x, pos_y, can_go):
        #super().__init__(tiles_group, all_sprites)
        super().__init__(all_sprites)
        self.image = tile_images[tile_type]
        self.can_go_to = can_go
        self.name = all_sprites  #tiles_group
        self.pic = tile_type
        self.rect = self.image.get_rect().move(tile_width * pos_x, tile_height * pos_y)
        self.pos_x = pos_x
        self.pos_y = pos_y

    def can_go(self):
        return self.can_go_to

    def name(self):
        return self.name

    def update(self):
        #print('update', self.pos_x, self.pos_y)
        if self.pic != BOARD[self.pos_y][self.pos_x][0] :
            self.image = tile_images[BOARD[self.pos_y][self.pos_x][0]]

    def kill(self):
        super().kill(self)


class Player(pygame.sprite.Sprite):
    def __init__(self, pos_x, pos_y):
        super().__init__(player_group, all_sprites)
        self.image = player_image
        self.rect = self.image.get_rect().move(tile_width * pos_x, tile_height * pos_y)
        self.x = pos_x
        self.y = pos_y

    def position_x(self):
        return self.x

    def position_y(self):
        return self.y


class Camera:
    # зададим начальный сдвиг камеры
    def __init__(self):
        self.dx = 500
        self.dy = 500

    # сдвинуть объект obj на смещение камеры
    def apply(self, obj):
        obj.rect.x += self.dx
        obj.rect.y += self.dy

    # позиционировать камеру на объекте target
    def update(self, target):
        self.dx = -(target.rect.x + target.rect.w // 2 - tile_width // 2) + WIDTH // 2
        self.dy = -(target.rect.y + target.rect.h // 2 - tile_height // 2) + HEIGHT // 2


pygame.init()

size = WIDTH, HEIGHT
screen = pygame.display.set_mode(size)
file_of_game_to_play = 'level1.txt'
# print('1', file_of_game_to_play)
start_screen()
# print(2, file_of_game_to_play)

xm = 0
ym = 0
level = load_level(file_of_game_to_play)
player, x, y, count = generate_level(level)
pos_x = player.position_x()
pos_y = player.position_y()
pygame.mixer.music.load('sound\\music.mp3')
pygame.mixer.music.play()

sound_crystal = pygame.mixer.Sound('sound\\crystal.wav')
# sound_bomb = pygame.mixer.Sound('sound\\bomb.mp3')
# sound_fail = pygame.mixer.Sound('sound\\fail.mp3')
# sound_victory = pygame.mixer.Sound('sound\\victory.mp3')

eaten = 0
sec = 0
camera = Camera()
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            terminate()
        if event.type == pygame.MOUSEBUTTONDOWN:
            clicked_x = event.pos[0]
            clicked_y = event.pos[1]
            if WIDTH - 50 < clicked_x < WIDTH and HEIGHT - 50 < clicked_y < HEIGHT:
                terminate()
        if event.type == pygame.KEYDOWN:
            xm = 0
            ym = 0
            key = pygame.key.get_pressed()
            if key[pygame.K_LEFT]:
                if BOARD[pos_y][pos_x - 1][1]:
                    if BOARD[pos_y][pos_x - 1][0] == 'crystal':
                        eaten += 1
                        pygame.mixer.music.pause()
                        sound_crystal.play()
                        pygame.mixer.music.unpause()
                    BOARD[pos_y][pos_x] = ['empty', True]
                    player.rect.x -= 32
                    pos_x -= 1
            if key[pygame.K_RIGHT]:
                if BOARD[pos_y][pos_x + 1][1]:
                    if BOARD[pos_y][pos_x + 1][0] == 'crystal':
                        eaten += 1
                        pygame.mixer.music.pause()
                        sound_crystal.play()
                        pygame.mixer.music.unpause()
                    BOARD[pos_y][pos_x] = ['empty', True]
                    player.rect.x += 32
                    pos_x += 1
            if key[pygame.K_UP]:
                if BOARD[pos_y - 1][pos_x][1]:
                    if BOARD[pos_y - 1][pos_x][0] == 'crystal':
                        eaten += 1
                        pygame.mixer.music.pause()
                        sound_crystal.play()
                        pygame.mixer.music.unpause()
                    BOARD[pos_y][pos_x] = ['empty', True]
                    player.rect.y -= 32
                    pos_y -= 1
            if key[pygame.K_DOWN]:
                if BOARD[pos_y + 1][pos_x][1]:
                    if BOARD[pos_y + 1][pos_x][0] == 'crystal':
                        eaten += 1
                        pygame.mixer.music.pause()
                        sound_crystal.play()
                        pygame.mixer.music.unpause()
                    BOARD[pos_y][pos_x] = ['empty', True]
                    player.rect.y += 32
                    pos_y += 1
            print(pos_y, pos_x)
            print(BOARD[pos_y][pos_x][0])
            print(count, eaten)
    # all_sprites = pygame.sprite.Group()
    all_sprites.update()
    #update_level(pos_x, pos_y)
    screen.fill((0, 0, 0))
    # изменяем ракурс камеры
    camera.update(player)
    # обновляем положение всех спрайтов
    for sprite in all_sprites:
        camera.apply(sprite)

    all_sprites.draw(screen)
    tiles_group.draw(screen)
    player_group.draw(screen)

    image = pygame.image.load('go_out.jpg')
    image1 = pygame.transform.scale(image, (45, 45))
    screen.blit(image1, (WIDTH - 50, HEIGHT - 50))

    font = pygame.font.Font(None, 50)
    st = str(eaten) + '/' + str(count)
    text = font.render(st, 1, (255, 255, 255))
    text_x = 10
    text_y = 10
    text_w = text.get_width()
    text_h = text.get_height()
    screen.blit(text, (text_x, text_y))

    # time.sleep(1)
    # sec += 1
    # st = str(sec // 60).rjust(2, '0') + ':' + str(sec % 60).rjust(2, '0')
    # text = font.render(st, 1, (255, 255, 255))
    # text_x = WIDTH - text.get_width() - 10
    # text_y = 10
    # text_w = text.get_width()
    # text_h = text.get_height()
    # screen.blit(text, (text_x, text_y))

    pygame.display.flip()
